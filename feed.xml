<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://lcbc12.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://lcbc12.github.io//" rel="alternate" type="text/html" /><updated>2022-04-06T17:22:02+02:00</updated><id>https://lcbc12.github.io//feed.xml</id><title type="html">Lcbc12’s bookmark</title><subtitle>Pour garder un œil sur mes projets ! Et voir les mises à jour du site qui évoluera aussi !</subtitle><entry><title type="html">Non Fungible Tokens</title><link href="https://lcbc12.github.io//2022/01/21/Non-Fungible-Tokens.html" rel="alternate" type="text/html" title="Non Fungible Tokens" /><published>2022-01-21T00:00:00+01:00</published><updated>2022-01-21T00:00:00+01:00</updated><id>https://lcbc12.github.io//2022/01/21/Non-Fungible-Tokens</id><content type="html" xml:base="https://lcbc12.github.io//2022/01/21/Non-Fungible-Tokens.html"><![CDATA[<h2 id="why-nft">Why NFT</h2>

<p>Depuis 2021, les NFT deviennent de plus en plus présents, au point que presque tous les projets blockchains les utilisent.</p>

<p>J’ai alors décidé de m’y intéresser afin de savoir ce qu’on pouvait en tirer et comment je pourrai aider les entreprises à les utiliser.</p>

<h2 id="version-1">Version 1</h2>

<p>Etat : <span class="finished">Terminé</span></p>

<p>Une version juste pour commencer, l’idée étant de voir la base des NFT sur Ethereum.</p>

<p>Serveur : Ganache avec Truffle
Smart contract : Solidity. Basé sur ERC721.sol.
Front : ReactJS</p>

<p>Voici un schéma de la solution : 
<img src="https://raw.githubusercontent.com/Lcbc12/NFT/abc6aa8aad6a60519c74a4cea84eb188d905cc41/NFT.svg" alt="NFT Solution diagram" /></p>

<p>Ici, je voulais m’arrêter surtout au mintage et au visionnage des NFT. Du coup n’importe qui peut minter un NFT, stocker toutes les données sur <a href="&quot;https://nft.storage/&quot;">NFT Storage</a> et sauvegarder toutes les métadata sur la blockchain.</p>

<p>Le viewer va ensuite récupérer ces métadatas, charger l’image et l’afficher sur le site.</p>

<p>Pour résumer:</p>

<ul>
  <li>Minter une image, l’URI des métadata est stockée sur la blockchain, les métadata sont stockées sur NFT Storage;</li>
  <li>Visionner un NFT se fait en récupérant l’image en inversant le processus.</li>
</ul>

<h2 id="version-2">Version 2</h2>

<p>Etat : <span class="not_started">Pas encore commencé</span></p>

<p>Pour la deuxième version, je souhaiterais créer un marketplace où n’importe qui pourrait acheter/vendre un NFT qu’il possède.</p>

<p>J’utiliserai pour cela un jeton qui servira à faire les transferts d’argent.</p>

<p>Il faudra que le site puisse se connecter à divers crypto-portefeuille voire même divers blockchains.</p>

<p>Pour résumer:</p>

<ul>
  <li>Une place de marché pour acheter/vendre des NFT via un nouveau jeton;</li>
  <li>Connexion à d’autres portefeuilles que Metamask.</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[travaux sur NFT : mint, view et marketplace]]></summary></entry><entry><title type="html">Proof of Retrievability</title><link href="https://lcbc12.github.io//2022/01/21/Proof-of-Retrievability.html" rel="alternate" type="text/html" title="Proof of Retrievability" /><published>2022-01-21T00:00:00+01:00</published><updated>2022-01-21T00:00:00+01:00</updated><id>https://lcbc12.github.io//2022/01/21/Proof%20of-Retrievability</id><content type="html" xml:base="https://lcbc12.github.io//2022/01/21/Proof-of-Retrievability.html"><![CDATA[<h2 id="rapide-introduction-à-la-proof-of-retrievability">Rapide Introduction à la Proof of Retrievability</h2>

<p>Une Proof of Retrievability (ou PoR) est un moyen cryptographique de vérifier qu’un fichier est toujours stocké sur un serveur distant sans avoir à télécharger le fichier lui-même.
Ainsi, j’utilise personnellement une méthode dite “publique” de PoR afin que n’importe qui puisse réaliser cette vérification.</p>

<h3 id="comment-ça-marche-">Comment ça marche ?</h3>
<p>Grâce à une étape préalable, celui qui possède le fichier signe son fichier cryptographiquement et génère ainsi un deuxième fichier. Il envoie ses deux fichiers au serveur distant et est ensuite en capacité de lui envoyer des challenges (cryptographiques). Le serveur peut calculer une preuve et l’envoyer au client. N’importe qui disposant du challenge et de la preuve peut, dans la version publique, vérifier cette preuve et avoir la certitude que le fichier est bel et bien stocké.</p>

<h2 id="travaux-effectués">Travaux effectués</h2>

<p>Avec l’émergence de la blockchain, les Proof of Retrievability ont trouvé leur place dans ce système.
En effet, les smart contract peuvent très bien gérés tout seul l’étape de vérification en ayant à stocker que très peu d’informations.
Ainsi, les utilisateurs ont trouvé une alternative de stockage aux traditionnels serveur de stockage centralisé.
C’est pourquoi j’ai travaillé avec l’ISAE Supaéro et co-rédigé <a href="https://arxiv.org/pdf/2001.07016.pdf">BlockHouse</a>.</p>

<h2 id="versions">Versions</h2>

<h3 id="version-1">Version 1</h3>

<p>Etat : <span class="finished">Terminé</span></p>

<p>Dans cette première version, j’ai voulu implémenter le protocole publique le plus connu de PoR.
Vous pourrez en savoir plus grâce à ce PDF : <a href="https://link.springer.com/content/pdf/10.1007/978-3-540-89255-7_7.pdf">Compact Proofs of Retrievability</a></p>

<p>J’ai rédigé un script de test afin de vérifier le process de vérification.</p>

<p>Pour résumer :</p>

<ul>
  <li>Le protocole publique de Compact Proofs of Retrievability dans un smart contract;</li>
  <li>Script de test afin de vérifier s’il fonctionne et faire des benchs.</li>
</ul>

<h3 id="version-2">Version 2</h3>

<p>Etat : <span class="pending">En cours</span></p>

<p>Dans cette version, je voulais partager le script C++ utilisé pour réaliser toutes les étapes du process.</p>

<p>Je voudrais aussi réaliser un outil de benchmark afin de trouver la meilleure configuration du processus selon le fichier.</p>

<p>Pour résumer:</p>

<ul>
  <li>Un outil C++ pour signer les fichiers, générer des challenges, calculer des preuves et, évidemment, les vérifier;</li>
  <li>Outil de benchmark pour détecter la meilleure configuration pour le fichier donné.</li>
</ul>

<h3 id="version-3">Version 3</h3>

<p>Etat : <span class="not_started">Pas encore commencé</span></p>

<p>Une fois tout le reste implémenté, pourquoi pas créer une interface web permettant à n’importe qui de vendre son espace de stockage via un marketplace.</p>

<p>Il utiliserait évidemment les mécanismes des Proof of Retrievability pour assurer le bon fonctionnement du site.</p>

<p>J’utiliserai un paiement par le biais de jeton crypto.</p>

<p>Pour résumer :</p>

<ul>
  <li>MarketPlace pour acheter/vendre de l’espace de stockage pour un fichier;</li>
  <li>Une interface web permettant de faciliter l’utilisation de toutes les étapes du protocol;</li>
  <li>Paiement par le biais de jetons.</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[travaux sur les PoR : particulièrement sur la Public Compact Proof of Retrievability]]></summary></entry></feed>